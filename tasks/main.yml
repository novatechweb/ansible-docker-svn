---
# file: roles/docker-svn/tasks/main.yaml

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ host_svn_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ svn_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: Create before_backup script
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.svn

- name: Create after_backup script
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.svn

# *****************************************************************************
# update the Docker restore config

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ svn_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_svn_restore

# *****************************************************************************
# Update or make the image.
- name: Checkout image repo
  git:
    repo: '{{ svn_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-svn'

- name: build image
  docker_build:
    image_name: '{{ svn_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    dockerfile_dir: '{{ docker_projects_dir }}/docker-svn'

# *****************************************************************************
# Create the data volumes

- name: data-volume container
  docker_datavolume:
    image_name: '{{ svn_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ svn_dv_name }}'

# *****************************************************************************
# Start the data container running

- name: start container
  docker_run:
    container_name: '{{ svn_container_name }}'
    docker_run_arguments: '--hostname={{ container_addr_map.svn.hostname }} {{ container_port_map.svn.port_args }} --link {{ openldap_container_name }}:ldap --volumes-from {{ openssl_dv_name }} --volumes-from {{ svn_dv_name }} --env SVN_HOSTNAME={{ container_addr_map.svn.hostname }} --env SVN_LDAP_PASSWORD={{ ldap_proxyagent_password | quote }} {{ svn_image_name }}:{{ docker_image_tag }}'

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_svn_restore.stat.exists == False
